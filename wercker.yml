box: node
dev:
  steps:
    - npm-install
    - internal/watch:
        code: npm start
        reload: true
build:
  steps:

    - script:
        name: echo nodejs information
        code: |
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"
    - npm-install

    # run unit tests
    #- npm-test


setup-build:
  steps:
    # Run npm bower and gulp to build artifacts
    - script:
        name: build release code
        code: |
          npm run build
      # npm run setup



push-release:
  # Override the node:4-slim box
  box:
    id: nginx:alpine
    cmd: /bin/sh

  steps:
    # - script:
    #     name: copy to /var/www/app working dir
    #     code: |
    #       cp -r $WERCKER_ROOT/* /var/www/app/

    - script:
        name: cleanup build result
        code: |
          rm -rf *

    - script:
      name: export latest or dev tag
      code: |
        [ "$WERCKER_GIT_BRANCH" = "master" ] \
        && export LATEST_FLAG=latest \
        || export LATEST_FLAG=dev

    # push container as-is
    - internal/docker-push:
            username: $QUAY_USERNAME
            password: $QUAY_PASSWORD
            tag: $WERCKER_GIT_COMMIT, $WERCKER_GIT_BRANCH, $LATEST_FLAG
            repository: quay.io/opentargets/webapp
            registry: $QUAY_HOST
            # working-dir: /var/www/app
            # entrypoint: /docker-entrypoint.sh
            # cmd: supervisord
            # ports: "80 443 8008 8009"
            disable-sync: true

    # - internal/docker-push:
    #   entrypoint: docker-entrypoint.sh
    #   tag: latest $WERCKER_GIT_COMMIT, $WERCKER_GIT_BRANCH
    #   registry: https://registry.hub.docker.com
    #   repository: opentargets/webapp
    #   username: $OT_DOCKER_HUB_USERNAME
    #   password: $OT_DOCKER_HUB_PASSWORD
    # - scripts: |
    #   docker build Dockerfile.build -t "opentargets/webapp:prod-$WERCKER_GIT_COMMIT" .
    #   docker push opentargets/webapp


    # - internal/docker-push:
    #     username: _json_key
    #     password: $GCR_JSON_KEY_FILE
    #     working-dir: /var/www/app
    #     entrypoint: /docker-entrypoint.sh
    #     tag: $WERCKER_GIT_COMMIT
    #     repository: $GCR_REPO
    #     registry: $GCR_HOST
    #     cmd: supervisord
    #     ports: "80 443 8008 8009"
    #     disable-sync: true


# deploy-to-kubernetes:
#   steps:
#   # https://github.com/wercker/step-bash-template
#   # This Wercker step will look for files in our repo with a .template extension.
#   # It will expand any environment variables in those files, then remove the
#   # template extension.
#   - bash-template:
#     input: "kube-conf/*.template"
#   - script:
#     name: Prepare Kubernetes files
#     code: |
#       mkdir $WERCKER_OUTPUT_DIR/kubernetes
#       mv $WERCKER_ROOT/kube-conf/rest_api_*.yml $WERCKER_OUTPUT_DIR/kubernetes
#   - riceo/kubectl:
#     name: deploy to kubernetes
#     server: $KUBERNETES_MASTER
#     gcloud-key-json: $GCR_JSON_KEY_FILE
#     gke-cluster-name: $GKE_CLUSTER_NAME
#     gke-cluster-zone: $GKE_CLUSTER_ZONE
#     gke-cluster-project: $GKE_CLUSTER_PROJECT
#     command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/
