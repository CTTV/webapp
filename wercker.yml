# use a long-term-support (LTS) version of node. Latest is currently Boron
box: node:boron
dev:
  steps:
    - npm-install
    - internal/watch:
        code: npm start
        reload: true
build:
  steps:

    - script:
        name: echo nodejs information
        code: |
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"

    - npm-install:
        clear-cache-on-failed: true
        options: --quiet

    # #run unit tests
    # - npm-test
    - script:
        name: run bower, gulp and jspm for good measure
        code: |
          npm run setup

push-debug:
  steps:
    - internal/docker-push:
      repository: quay.io/opentargets/webapp
      username: $QUAY_USERNAME
      password: $QUAY_PASSWORD
      registry: $QUAY_HOST
      tag: debug-$WERCKER_GIT_COMMIT
      working-dir: /pipeline/source
      cmd: npm start

push-release:
  # Override the node box
  box:
    id: nginx:alpine
    cmd: /bin/sh

  steps:
    - script:
      name: forward deployment scripts
      code: |
        mv "deployment" "$WERCKER_OUTPUT_DIR"
        ls -l $WERCKER_OUTPUT_DIR/

    - script:
      name: look into node_modules
      code: |
        ls -l node_modules/

    - script:
      name: mv static files
      code: |
        mkdir -p /var/www/app
        mv $WERCKER_SOURCE_DIR/* /var/www/app/

    - script:
      name: cleanup build result
      code: rm -rf *

    - script:
      name: export latest or dev tag
      code: |
        [ "$WERCKER_GIT_BRANCH" = "master" ] \
        && export LATEST_FLAG=latest \
        || export LATEST_FLAG=dev

    - internal/docker-push:
      disable-sync: true
      repository: quay.io/opentargets/webapp
      username: $QUAY_USERNAME
      password: $QUAY_PASSWORD
      registry: QUAY_HOST
      tag: release-$WERCKER_GIT_COMMIT $WERCKER_GIT_BRANCH $LATEST_FLAG
      working-dir: /var/www/app
      entrypoint: /docker-entrypoint.sh
      ports: "80 443"
      cmd: nginx -g 'daemon off;'

    - internal/docker-push:
      username: _json_key
      password: $GCR_JSON_KEY_FILE
      working-dir: /var/www/app
      entrypoint: /docker-entrypoint.sh
      tag: release-$WERCKER_GIT_COMMIT $WERCKER_GIT_BRANCH $LATEST_FLAG
      repository: eu.gcr.io/open-targets/webapp-prod
      registry: $GCR_HOST
      ports: "80 443"
      cmd: nginx -g 'daemon off;'



    # push container as-is
    # - internal/docker-push:
    #         username: $QUAY_USERNAME
    #         password: $QUAY_PASSWORD
    #         tag: $WERCKER_GIT_COMMIT, $WERCKER_GIT_BRANCH, $LATEST_FLAG
    #         repository: quay.io/opentargets/webapp
    #         registry: $QUAY_HOST
    #         # working-dir: /var/www/app
    #         # entrypoint: /docker-entrypoint.sh
    #         # cmd: supervisord
    #         # ports: "80 443 8008 8009"
    #         disable-sync: true

    # - internal/docker-push:
    #   entrypoint: docker-entrypoint.sh
    #   tag: latest $WERCKER_GIT_COMMIT, $WERCKER_GIT_BRANCH
    #   registry: https://registry.hub.docker.com
    #   repository: opentargets/webapp
    #   username: $OT_DOCKER_HUB_USERNAME
    #   password: $OT_DOCKER_HUB_PASSWORD
    # - scripts: |
    #   docker build Dockerfile.build -t "opentargets/webapp:prod-$WERCKER_GIT_COMMIT" .
    #   docker push opentargets/webapp






# deploy-to-kubernetes:
#   steps:
#   # https://github.com/wercker/step-bash-template
#   # This Wercker step will look for files in our repo with a .template extension.
#   # It will expand any environment variables in those files, then remove the
#   # template extension.
#   - bash-template:
#     input: "kube-conf/*.template"
#   - script:
#     name: Prepare Kubernetes files
#     code: |
#       mkdir $WERCKER_OUTPUT_DIR/kubernetes
#       mv $WERCKER_ROOT/kube-conf/rest_api_*.yml $WERCKER_OUTPUT_DIR/kubernetes
#   - riceo/kubectl:
#     name: deploy to kubernetes
#     server: $KUBERNETES_MASTER
#     gcloud-key-json: $GCR_JSON_KEY_FILE
#     gke-cluster-name: $GKE_CLUSTER_NAME
#     gke-cluster-zone: $GKE_CLUSTER_ZONE
#     gke-cluster-project: $GKE_CLUSTER_PROJECT
#     command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/
